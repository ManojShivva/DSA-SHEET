// Question - Palindrome Partitioning II
// Level - Hard
// Prerequsites - Should be familiar with solving Partition DP problems.


//Memoization

public boolean isPalindrome(String s, int start, int end)
{
    String x = s.substring(start, end);
    for(int i = 0; i < x.length()/2; i++)
    {
        if(x.charAt(i) != x.charAt(x.length()-i-1))
        {
            return false;
        }
    }
    return true;
}
public int helper(int index, int n, String s, int[] dp)
{
    if(index == s.length())
    {
        return 0;
    }
    if(dp[index] != -1)
    {
        return dp[index];
    }
    int overall = 1000000007;
    for(int i = index; i < s.length(); i++)
    {
        if(isPalindrome(s,index,i+1))
        {
            int cuts = 1 + helper(i+1, n, s, dp); 
            overall = Math.min(cuts, overall);      
        }
    }
    dp[index] = overall;
    return dp[index];
}
public int minCut(String s) {
    int dp[] = new int[s.length()];
    for(int i = 0; i < s.length(); i++)
    {
        dp[i] = -1;
    }
    return helper(0, s.length(), s, dp)-1;
}


//Tabulation

public boolean isPalindrome(String s, int start, int end)
{
    end = end-1;
    while(start < end)
    {
        if(s.charAt(start) != s.charAt(end))
        {
            return false;
        }
        start++;
        end--;
    }
    return true;
}

public int minCut(String s) {
    int dp[] = new int[s.length()+1];
    int n = s.length();
    for(int i = n-1; i >= 0; i--)
    {
        int overall = 1000000007;
        for(int j = i; j < n; j++)
        {
            if(isPalindrome(s,i,j+1))
            {
                int cuts = 1 + dp[j+1]; 
                overall = Math.min(cuts, overall);      
            }
        }
        dp[i] = overall;
    }
    return dp[0]-1;
}