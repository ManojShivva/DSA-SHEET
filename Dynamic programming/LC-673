
// Question - Number of Longest Increasing Subsequence
// Level - Medium
// Prerequsites - Should be familiar with LIS patteren [which uses Pick & not-Pick approach]

//Tabulation TC - O(N*N)

class Solution {
    public int findNumberOfLIS(int[] nums) {
        int dp[] = new int[nums.length];
        int count[] = new int[nums.length];
        for(int i = 0; i < nums.length; i++)
        {
            dp[i] = 1;
        }
        int maxi = 0;
        int last_index = 0;
        for(int i = 0; i < nums.length; i++)
        {
            count[i] = 1;
            for(int j = 0; j < i; j++)
            {
                if((nums[i] > nums[j]) && (1+dp[j] > dp[i]))
                {
                    dp[i] = 1 + dp[j];
                    //inherit the count
                    count[i] = count[j];
                }
                else if((nums[i] > nums[j]) && (1+dp[j] == dp[i]))
                {
                    //increase the count
                    count[i] += count[j];
                }
            }
            if(maxi < dp[i])
            {
                maxi = dp[i];
            }   
        }
        int res = 0;
        for(int i = 0; i < nums.length; i++)
        {
            if(dp[i] == maxi)
            {
                res += count[i];
            }
        }
        return res;
    }
}