// Question - Maximal Rectangle.
// Level - Hard
// Prerequsites - 1. Nearest smaller number to the left & 2. Nearest smaller number to the right

public int largestRectangleArea(int[] heights) {
    int length[] = new int[heights.length];
    Stack<Integer> stack = new Stack<>();
    for(int i = heights.length-1; i >= 0; i--)
    {
        while((!stack.isEmpty()) && (heights[stack.peek()] >= heights[i]))
        {
            stack.pop();
        }
        if(stack.isEmpty())
        {
            length[i] = heights.length;
        }
        else
        {
            length[i] = stack.peek();
        }
        stack.push(i);
    }
    stack.clear();
    for(int i = 0; i < heights.length; i++)
    {
        while((!stack.isEmpty()) && (heights[stack.peek()] >= heights[i]))
        {
            stack.pop();
        }
        if(stack.isEmpty())
        {
            length[i] = (length[i])*heights[i];
        }
        else
        {
            length[i] = (length[i]-stack.peek()-1)*heights[i];
        }
        stack.push(i);
    }
    int result = 0;
    for(int i = 0; i < heights.length; i++)
    {
        result = Math.max(result, length[i]);
    }
    return result;
}
public int maximalRectangle(char[][] matrix) {
    int colVals[] = new int[matrix[0].length];
    int maxi = Integer.MIN_VALUE;
    for(int i = 0; i < matrix.length; i++)
    {
        for(int j = 0; j < matrix[0].length; j++)
        {
            if(matrix[i][j] == '1')
            {
                colVals[j] += 1;
            }
            else
            {
                colVals[j] = 0;
            }
        }
        maxi = Math.max(maxi, largestRectangleArea(colVals));
    }
    return maxi;
}